<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Mcc.Revit.Toolkit.UI;component/Themes/Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <FontFamily x:Key="font">/Mcc.Revit.Master;Component/Assets/#iconfont</FontFamily>
    <SolidColorBrush x:Key="mainForeground" Color="#393F48" />
    <SolidColorBrush x:Key="selectedBackground" Color="#DEDCEB" />
    <SolidColorBrush x:Key="mainBackground" Color="#F7F7F7" />
    <SolidColorBrush x:Key="submitBackground" Color="#425066" />
    <SolidColorBrush x:Key="cancleBackground" Color="#6b6882" />
    <!--
        ContentControl控件的ContentTemplate属性绑定DataTemplate,决定content如何显示 ；
        Template属性绑定ControlTemplate,决定控件整体如何显示,ContentPresenter是DataTemplate即内容的占位符
    -->
    <!--
        ItemsControl 控件的ItemTemplate属性绑定DataTemplate,决定列表中的单条数据如何显示；
        Template属性绑定ControlTemplate,决定控件整体如何显示，ItemsPresenter是DataTemplate即整个数据列表的占位符
    -->

    <!--  【1】button点击按钮样式  -->
    <Style x:Key="btn" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="#393F48" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  ControlTemplate改变windows控件的外观  -->
                <ControlTemplate TargetType="{x:Type Button}">
                    <!--  ContentPresenter自动绑定窗口的Content，给按钮加个边框  -->
                    <Border
                        Name="back"
                        Background="#00FFFFFF"
                        CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  TargetName指明控件的名称Name="back"  -->
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="back" Property="Background" Value="#EAEAEA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  【2】window窗口样式  -->
    <Style x:Key="winStyle" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="#F7F7F7" />
        <!--  应用WindowChrome.WindowChrome属性，标题栏会被内容区域覆遮盖住  -->
        <!--  AllowsTransparency="True"，WindowStyle="None"，此时客户端的标题栏被去掉了  -->
        <!--  CaptionHeight标题栏高度(标题栏不可见因此不影响外观),本案例禁用了按钮，自己定义图标实现关闭  -->
        <!--  GlassFrameThickness通常用于定义窗口边缘玻璃效果的厚度  -->
        <!--  UseAeroCaptionButtons是否使用Windows Aero主题风格的最小化、最大化和关闭按钮  -->
        <!--  ResizeBorderThickness向窗口内部扩展区域,该区域可以使用用鼠标拖动、缩放  -->
        <!--  NonClientFrameEdges指定窗口的四周是否显示操作系统的边框  -->
        <!--  Window控件也可以使用ControlTemplate重新定义外观显示  -->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    x:Name="WindowChrome"
                    CaptionHeight="35"
                    GlassFrameThickness="1"
                    NonClientFrameEdges="None"
                    ResizeBorderThickness="5"
                    UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <!--  【1】自定义的标题栏区域  -->
                                <Grid Grid.Row="0" Background="#e9f1f6">
                                    <Image
                                        Width="25"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Source="/Salmon.Revit.Addin;component/Assets/favicon32.png" />
                                    <TextBlock
                                        Margin="10,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        FontSize="18"
                                        FontWeight="Black"
                                        Foreground="#393F48"
                                        Text="{TemplateBinding Title}" />
                                    <!--  这个Command是我们定义在ViewModel的基类BindableBase中的,发送消息用来关闭窗口  -->
                                    <!--  窗口加载的时候注册Loaded事件,接收消息关闭窗口(定义在SimpleIocExtension中)  -->
                                    <!--  默认情况下任何在Chrome的范围内的元素都无法响应鼠标事件  -->
                                    <!--  在自定义标题栏放其它交互元素需要WindowsChrome.IsHitTestVisibleInChrome=True  -->
                                    <Button
                                        Margin="5"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"
                                        Command="{Binding CancelCommand}"
                                        CommandParameter="{Binding Path=Title, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                                        Content="&#xe619;"
                                        FontFamily="{StaticResource font}"
                                        FontSize="20"
                                        Style="{StaticResource btn}"
                                        WindowChrome.IsHitTestVisibleInChrome="True" />

                                </Grid>

                                <!--  【2】自定义内容区域  -->
                                <ContentPresenter Grid.Row="1" />
                            </Grid>
                        </Border>
                        <!--  用于调整窗口大小的控件，通常位于窗口的右下角  -->
                        <ResizeGrip
                            Name="ResizeGrip"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            IsTabStop="False"
                            WindowChrome.ResizeGripDirection="BottomRight" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  【3】submit提交按钮样式  -->
    <Style x:Key="submit" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="Background" Value="{StaticResource submitBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  重新定义了button按钮的视觉结构和它的行为触发  -->
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="back"
                        Background="{TemplateBinding Background}"
                        CornerRadius="3">
                        <ContentPresenter
                            Name="content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  鼠标悬停在按钮上时，背景颜色会在0.2秒内过渡到 #686868  -->
                        <!--  当鼠标离开按钮时，背景颜色又会过渡回#393F48  -->
                        <!--  Storyboard.TargetProperty指向的是Border控件的Background属性中的SolidColorBrush的Color属性  -->
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#686868"
                                        Duration="00:00:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#425066"
                                        Duration="00:00:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  【4】cancle取消按钮样式  -->
    <Style x:Key="cancle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="Background" Value="{StaticResource cancleBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  重新定义了button按钮的视觉结构和它的行为触发  -->
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="back"
                        Background="{TemplateBinding Background}"
                        CornerRadius="3">
                        <ContentPresenter
                            Name="content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  鼠标悬停在按钮上时，背景颜色会在0.2秒内过渡到 #686868  -->
                        <!--  当鼠标离开按钮时，背景颜色又会过渡回#393F48  -->
                        <!--  Storyboard.TargetProperty指向的是Border控件的Background属性中的SolidColorBrush的Color属性  -->
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#686868"
                                        Duration="00:00:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#6b6882"
                                        Duration="00:00:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  【5】listBox列表样式  -->
    <!--  listBoxItem  -->
    <Style x:Key="listBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Margin="5">
                        <Border
                            Name="back"
                            Background="#FFFFFF"
                            CornerRadius="5">
                            <UIElement.Effect>
                                <DropShadowEffect
                                    BlurRadius="5"
                                    Opacity="0.3"
                                    ShadowDepth="0" />
                            </UIElement.Effect>
                            <ContentPresenter />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="back" Property="UIElement.Effect">
                                <Setter.Value>
                                    <DropShadowEffect
                                        BlurRadius="10"
                                        Direction="0"
                                        Opacity="0.3"
                                        ShadowDepth="0"
                                        Color="#393F48" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ListBoxItem.IsSelected" Value="True">
                            <Setter TargetName="back" Property="Background" Value="{DynamicResource selectedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  listBox  -->
    <Style x:Key="listBox" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{StaticResource mainBackground}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource listBoxItem}" />
    </Style>
    <!--  【6】TextBlock文本框的样式  -->
    <Style x:Key="textBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="DemiBold" />
    </Style>
</ResourceDictionary>